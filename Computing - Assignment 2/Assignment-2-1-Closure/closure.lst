


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             Closure, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000         start
    6 00000000         
    7 00000000 E59F0098        LDR              R0, =ASize
    8 00000004 E5909000        LDR              R9, [R0]
    9 00000008 E5900000        LDR              R0, [R0]
   10 0000000C E59F1090        LDR              R1, =AElems
   11 00000010 E59FA08C        LDR              R10,=AElems
   12 00000014 E3A08000        LDR              R8, =0
   13 00000018         
   14 00000018         
   15 00000018 E3A0C000        LDR              R12, =0
   16 0000001C         
   17 0000001C         while
   18 0000001C E3A04000        LDR              R4, =0
   19 00000020 E5912000        LDR              R2, [R1]
   20 00000024 E3500000        CMP              R0, #0      ;while( aSize >= 0 
                                                            )
   21 00000028 9A00000F        BLS              endWhile    ;{
   22 0000002C E2400001        SUB              R0, R0, #1  ; aSize--;
   23 00000030         scanWhile                            ;
   24 00000030 E15C0009        CMP              R12, R9     ; while (scanCount 
                                                            < aSize)
   25 00000034 2A00000B        BHS              endScan     ; {
   26 00000038 E79A3004        LDR              R3, [R10, R4] ;  load next valu
                                                            e to R3 using an of
                                                            fset;
   27 0000003C E0835002        ADD              R5, R3, R2  ;  R5 = valueToScan
                                                             + nextValue;
   28 00000040 E3550000        CMP              R5, #0      ;  if( R5 == 0 )
   29 00000044 1A000004        BNE              notPair     ;  {
   30 00000048 E5818000        STR              R8, [R1]    ;   valueToScan = 0
                                                            ;
   31 0000004C E78A8004        STR              R8, [R10, R4] 
                                                            ;   nextValue = 0;
   32 00000050 E2811004        ADD              R1, R1, #4  ;   Address=+ 4;
   33 00000054 E3A0C000        MOV              R12,#0      ;   scanCount = 0; 
                                                            
   34 00000058 EAFFFFEF        B                while       ;   break; //breaks
                                                             to start of outer 
                                                            while loop
   35 0000005C         ;  }
   36 0000005C         notPair                              ;  else
   37 0000005C E28CC001        ADD              R12, R12, #1 ;  {
   38 00000060 E2844004        ADD              R4, R4 , #4 ;   scanCount =+ 1;
                                                              
   39 00000064 EAFFFFF1        B                scanWhile   ;   offset =+ 4;
   40 00000068         ;  }
   41 00000068         endScan                              ; }
   42 00000068 E3A00000        MOV              R0, #0      ; R0 = 0; 
   43 0000006C         ;B stop    ; break; //breaks to end
   44 0000006C         ;}
   45 0000006C         endWhile                             ;
   46 0000006C E3A00001        MOV              R0, #1      ;R0 = 1;
   47 00000070         
   48 00000070 E3B00302        MOVS             R0, #0x08000000



ARM Macro Assembler    Page 2 


   49 00000074 E3B01005        MOVS             R1, #0x00000005
   50 00000078 E3B02011        MOVS             R2, #17
   51 0000007C         
   52 0000007C E3A00000        LDR              R0, =0
   53 00000080         ; Keep dividing R2 by 2, while multiplying R1 by 2.
   54 00000080         whileMUL
   55 00000080 E3520000        CMP              R2, #0
   56 00000084 0A000004        BEQ              endwhileMUL
   57 00000088 E1B020A2        MOVS             R2, R2, LSR #1 
                                                            ; Divide R2 by 2.
   58 0000008C         
   59 0000008C         ; After dividing R2 by 2, (remainder is 0 or 1)
   60 0000008C         ; R1 * R2 := R1 * (2 * R2 + remainder) == 2 * R1 * R2 + 
                       (remainder ? R1 : 0)
   61 0000008C         
   62 0000008C 3A000000        BCC              endif1      ; If remainder of 1
                                                            .
   63 00000090 E0800001        ADD              R0, R1
   64 00000094         endif1
   65 00000094         
   66 00000094 E1A01081        MOV              R1, R1, LSL #1 
                                                            ; Multiply R1 by 2.
                                                            
   67 00000098         
   68 00000098         ; Now, result ==  R1 * R2 + R0
   69 00000098         ; So once R2 reaches 0, result == R0
   70 00000098         
   71 00000098 EAFFFFF8        B                whileMUL
   72 0000009C         endwhileMUL
   73 0000009C         
   74 0000009C         
   75 0000009C         
   76 0000009C         
   77 0000009C EAFFFFFE 
                       stop    B                stop
   78 000000A0         
   79 000000A0         
   80 000000A0 00000000 
              00000000 
              00000000         AREA             TestData, DATA, READWRITE
   81 00000000         
   82 00000000 0000000A 
                       ASize   DCD              10          ; Number of element
                                                            s in A
   83 00000004 00000004 
              00000006 
              FFFFFFFC 
              00000003 
              FFFFFFF8 
              00000000 
              00000006 
              00000008 
              FFFFFFFD 
              FFFFFFF8 AElems  DCD              +4,6,-4,+3,-8,0,+6,+8,-3,-8 
                                                            ; Elements of A
   84 0000002C         
   85 0000002C                 END
Command Line: --debug --xref --apcs=interwork --depend=.\closure.d -o.\closure.
o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Philips 



ARM Macro Assembler    Page 3 


--predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="NO_CLO
CK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA
 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\closure.l
st Closure.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Closure 00000000

Symbol: Closure
   Definitions
      At line 1 in file Closure.s
   Uses
      None
Comment: Closure unused
endScan 00000068

Symbol: endScan
   Definitions
      At line 41 in file Closure.s
   Uses
      At line 25 in file Closure.s
Comment: endScan used once
endWhile 0000006C

Symbol: endWhile
   Definitions
      At line 45 in file Closure.s
   Uses
      At line 21 in file Closure.s
Comment: endWhile used once
endif1 00000094

Symbol: endif1
   Definitions
      At line 64 in file Closure.s
   Uses
      At line 62 in file Closure.s
Comment: endif1 used once
endwhileMUL 0000009C

Symbol: endwhileMUL
   Definitions
      At line 72 in file Closure.s
   Uses
      At line 56 in file Closure.s
Comment: endwhileMUL used once
notPair 0000005C

Symbol: notPair
   Definitions
      At line 36 in file Closure.s
   Uses
      At line 29 in file Closure.s
Comment: notPair used once
scanWhile 00000030

Symbol: scanWhile
   Definitions
      At line 23 in file Closure.s
   Uses
      At line 39 in file Closure.s
Comment: scanWhile used once
start 00000000

Symbol: start



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 5 in file Closure.s
   Uses
      At line 3 in file Closure.s
Comment: start used once
stop 0000009C

Symbol: stop
   Definitions
      At line 77 in file Closure.s
   Uses
      At line 77 in file Closure.s
Comment: stop used once
while 0000001C

Symbol: while
   Definitions
      At line 17 in file Closure.s
   Uses
      At line 34 in file Closure.s
Comment: while used once
whileMUL 00000080

Symbol: whileMUL
   Definitions
      At line 54 in file Closure.s
   Uses
      At line 71 in file Closure.s
Comment: whileMUL used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AElems 00000004

Symbol: AElems
   Definitions
      At line 83 in file Closure.s
   Uses
      At line 10 in file Closure.s
      At line 11 in file Closure.s

ASize 00000000

Symbol: ASize
   Definitions
      At line 82 in file Closure.s
   Uses
      At line 7 in file Closure.s
Comment: ASize used once
TestData 00000000

Symbol: TestData
   Definitions
      At line 80 in file Closure.s
   Uses
      None
Comment: TestData unused
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file Closure.s
   Uses
      None
Comment: main unused
1 symbol
354 symbols in table
