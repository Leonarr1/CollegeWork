


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             StatEval, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 IMPORT           fputs
    6 00000000                 EXPORT           start
    7 00000000                 PRESERVE8
    8 00000000         
    9 00000000         start
   10 00000000 E59F00D8        LDR              R0,=hi      ; load opening stri
                                                            ng
   11 00000004 EBFFFFFE        BL               fputs       ; output string to 
                                                            console
   12 00000008         
   13 00000008 E3A00000        MOV              R0,#0       ; intialise values 
                                                            
   14 0000000C E3A04000        MOV              R4,#0       ;
   15 00000010 E3A05000        MOV              R5,#0       ;
   16 00000014 E3A0600A        MOV              R6,#0xA     ;
   17 00000018 E3A08000        MOV              R8,#0       ; count
   18 0000001C E3A09000        MOV              R9,#0       ; sum 
   19 00000020 E3E0A000        MOV              R10,#0xFFFFFFFF ; min
   20 00000024 E3A0B000        MOV              R11,#0x0    ; max
   21 00000028 E3A0C000        MOV              R12,#0      ; mean
   22 0000002C         
   23 0000002C         
   24 0000002C         read
   25 0000002C EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   26 00000030 E350000D        CMP              R0,#0x0D    ; while (key != CR
   27 00000034 0A00000E        BEQ              storeNum    ;
   28 00000038 E3500020        CMP              R0,#0x20    ; AND key != Space)
                                                            
   29 0000003C 0A00000C        BEQ              storeNum    ;
   30 00000040 E350001B        CMP              R0,#0x1B    ;
   31 00000044 0A000024        BEQ              stop        ; end program
   32 00000048         
   33 00000048 E3500039        CMP              R0,#0x39    ;  if (key isDigit)
                                                            
   34 0000004C CAFFFFF6        BGT              read        ;  //i.e ASCII code
                                                            s are from 0x30 to 
                                                            0x39 inclusive
   35 00000050 E3500030        CMP              R0,#0x30    ; 
   36 00000054 BAFFFFF4        BLT              read        ; {    
   37 00000058 EBFFFFFE        BL               sendchar    ;   echo key back t
                                                            o console
   38 0000005C         
   39 0000005C E3A07030        MOV              R7,#0x30    ;
   40 00000060 E1A04000        MOV              R4,R0       ;  store R0 -> R4
   41 00000064 E0444007        SUB              R4,R4,R7    ;  changes from ASC
                                                            II code to value 
   42 00000068 E0050596        MUL              R5,R6,R5    ;   multiplies the 
                                                            value by ten if the
                                                            re is more than one
                                                             digit
   43 0000006C E0855004        ADD              R5,R5,R4    ;  adds the newest 
                                                            value to the multip
                                                            lied value 
   44 00000070         ; }



ARM Macro Assembler    Page 2 


   45 00000070         ; Final value stored in R5
   46 00000070 EAFFFFED        B                read
   47 00000074         
   48 00000074         storeNum
   49 00000074 EBFFFFFE        BL               sendchar
   50 00000078 E2888001        ADD              R8,R8,#1    ; counter stored in
                                                             R8 
   51 0000007C E0899005        ADD              R9,R9,R5    ; sum stored in R9
   52 00000080         
   53 00000080 E3580001        CMP              R8,#1
   54 00000084 1A000001        BNE              notFirst
   55 00000088 E1A0A005        MOV              R10,R5
   56 0000008C E1A0B005        MOV              R11,R5
   57 00000090         notFirst
   58 00000090 E155000A        CMP              R5,R10      ;if(R5<min)
   59 00000094 3A000001        BLO              newMin      ;{ 
   60 00000098 E155000B        CMP              R5,R11      ; newMin = R5 
   61 0000009C 8A000001        BHI              newMax      ;} 
   62 000000A0         newMin                               ;else if(R5>max)
   63 000000A0 E1A0A005        MOV              R10,R5      ;{
   64 000000A4 EA000000        B                endMin      ; newMax = R5
   65 000000A8         newMax                               ;}
   66 000000A8 E1A0B005        MOV              R11,R5
   67 000000AC         endMin
   68 000000AC E3A04000        MOV              R4,#0
   69 000000B0 E1A05009        MOV              R5,R9
   70 000000B4         
   71 000000B4         while                                ; 
   72 000000B4 E1550008        CMP              R5,R8       ;while (remainder >
                                                            = divisor)
   73 000000B8 3A000002        BLO              endWhile    ;{
   74 000000BC E2844001        ADD              R4,R4,#1    ; quotient = quotie
                                                            nt +1
   75 000000C0 E0455008        SUB              R5,R5,R8    ; reaminder = remai
                                                            nder - b
   76 000000C4 EAFFFFFA        B                while       ;}
   77 000000C8         endWhile                             ;
   78 000000C8 E1A0C004        MOV              R12,R4      ; Move quotient to 
                                                            average
   79 000000CC         
   80 000000CC E04B700A        SUB              R7,R11,R10  ; Range
   81 000000D0         
   82 000000D0 E3A04000        MOV              R4,#0
   83 000000D4 E3A05000        MOV              R5,#0
   84 000000D8         
   85 000000D8 EAFFFFD3        B                read
   86 000000DC         
   87 000000DC EAFFFFFE 
                       stop    B                stop
   88 000000E0         
   89 000000E0 00000000        AREA             MyStrings, DATA, READONLY
   90 00000000         
   91 00000000 49 6E 70 
              75 74 20 
              76 61 6C 
              75 65 73 
              20 61 6E 
              64 20 70 
              72 65 73 



ARM Macro Assembler    Page 3 


              73 20 73 
              70 61 63 
              65 20 74 
              6F 20 73 
              74 6F 72 
              65 20 69 
              74 2E 20 
              50 72 65 
              73 73 20 
              27 45 53 
              43 27 20 
              6B 65 79 
              20 74 6F 
              20 65 6E 
              64 20 70 
              72 6F 67 
              72 61 6D 
              20 3E 20 
              00       hi      DCB              "Input values and press space t
o store it. Press 'ESC' key to end program > ",0
   92 0000004C         
   93 0000004C                 END
Command Line: --debug --xref --apcs=interwork --depend=.\stateval.d -o.\stateva
l.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Philip
s --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="NO_C
LOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SE
TA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\stateva
l.lst StatEval.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

StatEval 00000000

Symbol: StatEval
   Definitions
      At line 1 in file StatEval.s
   Uses
      None
Comment: StatEval unused
endMin 000000AC

Symbol: endMin
   Definitions
      At line 67 in file StatEval.s
   Uses
      At line 64 in file StatEval.s
Comment: endMin used once
endWhile 000000C8

Symbol: endWhile
   Definitions
      At line 77 in file StatEval.s
   Uses
      At line 73 in file StatEval.s
Comment: endWhile used once
newMax 000000A8

Symbol: newMax
   Definitions
      At line 65 in file StatEval.s
   Uses
      At line 61 in file StatEval.s
Comment: newMax used once
newMin 000000A0

Symbol: newMin
   Definitions
      At line 62 in file StatEval.s
   Uses
      At line 59 in file StatEval.s
Comment: newMin used once
notFirst 00000090

Symbol: notFirst
   Definitions
      At line 57 in file StatEval.s
   Uses
      At line 54 in file StatEval.s
Comment: notFirst used once
read 0000002C

Symbol: read
   Definitions
      At line 24 in file StatEval.s
   Uses
      At line 34 in file StatEval.s
      At line 36 in file StatEval.s
      At line 46 in file StatEval.s
      At line 85 in file StatEval.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

start 00000000

Symbol: start
   Definitions
      At line 9 in file StatEval.s
   Uses
      At line 6 in file StatEval.s
Comment: start used once
stop 000000DC

Symbol: stop
   Definitions
      At line 87 in file StatEval.s
   Uses
      At line 31 in file StatEval.s
      At line 87 in file StatEval.s

storeNum 00000074

Symbol: storeNum
   Definitions
      At line 48 in file StatEval.s
   Uses
      At line 27 in file StatEval.s
      At line 29 in file StatEval.s

while 000000B4

Symbol: while
   Definitions
      At line 71 in file StatEval.s
   Uses
      At line 76 in file StatEval.s
Comment: while used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyStrings 00000000

Symbol: MyStrings
   Definitions
      At line 89 in file StatEval.s
   Uses
      None
Comment: MyStrings unused
hi 00000000

Symbol: hi
   Definitions
      At line 91 in file StatEval.s
   Uses
      At line 10 in file StatEval.s
Comment: hi used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

fputs 00000000

Symbol: fputs
   Definitions
      At line 5 in file StatEval.s
   Uses
      At line 11 in file StatEval.s
Comment: fputs used once
getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file StatEval.s
   Uses
      At line 25 in file StatEval.s
Comment: getkey used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file StatEval.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file StatEval.s
   Uses
      At line 37 in file StatEval.s
      At line 49 in file StatEval.s

4 symbols
356 symbols in table
