


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             CLZ, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 EXPORT           start
    4 00000000         
    5 00000000                 AREA             Undef, CODE, READONLY
    6 00000000                 IMPORT           main
    7 00000000                 EXPORT           start
    8 00000000         
    9 00000000         start
   10 00000000 E3A04191        LDR              r4, =0x40000024 ; 0x40000024 is
                                                             mapped to 0x000000
                                                            24
   11 00000004 E59F507C        LDR              r5, =UndefHandler ; Address of 
                                                            new undefined handl
                                                            er
   12 00000008 E5845000        STR              r5, [r4]    ; Store new undef h
                                                            andler address
   13 0000000C         
   14 0000000C         ;
   15 0000000C         ; Test our new instruction
   16 0000000C         ;
   17 0000000C E59F5078        LDR              r5, =2_000000000000000100000000
00100000 
                                                            ; (15 (0xF) leading
                                                             zeros) will be sto
                                                            red in R4
   18 00000010         ; This is our undefinied unstruction opcode
   19 00000010 E3A01004        MOV              R1, #0x4
   20 00000014 E3A02004        MOV              R2, #0x4
   21 00000018 E0510002        SUBS             R0, R1, R2  ; simple instructio
                                                            n to set condition 
                                                            flag
   22 0000001C         
   23 0000001C 016F4F15        DCD              0x016F4F15  ; CLZ r4, r5 (r0 = 
                                                            leading zeros in R5
                                                            )
   24 00000020         
   25 00000020         ; condition set to EQ (if the Z flag is set the operatio
                       n will execute)
   26 00000020         ; otherwise the condtion will be skipped
   27 00000020         ; assembler is handling the condition, however to do thi
                       s manually I would isolate the condition flags and ensur
                       e the correct flag was set/clear
   28 00000020         
   29 00000020 EAFFFFFE 
                       stop    B                stop
   30 00000024         
   31 00000024         
   32 00000024         ;
   33 00000024         ; Undefined exception handler
   34 00000024         ;
   35 00000024         UndefHandler
   36 00000024 E92D5FFF        STMFD            sp!, {r0-r12, LR} 
                                                            ; save registers
   37 00000028         
   38 00000028 E51E4004        LDR              r4, [lr, #-4] ; load undefinied
                                                             instruction
   39 0000002C E59F905C        LDR              r9, =0xF000F00F
   40 00000030 E1C45009        BIC              r5, r4, r9  ; clear all but opc



ARM Macro Assembler    Page 2 


                                                            ode bits
   41 00000034 E59FA058        LDR              R10, =0x016F0F10
   42 00000038 E135000A        TEQ              r5, R10     ; check for undefin
                                                            ed opcode 0x1
   43 0000003C 1A000005        BNE              endif1      ; if (clz instructi
                                                            on) {
   44 00000040 E204500F        BIC              r5, r4, #0xFFFFFFF0 ;  isolate 
                                                            Rm register number
   45 00000044 E2047A0F        BIC              r7, r4, #0xFFFF0FFF ;  isolate 
                                                            Rd register number
   46 00000048 E1A07627        MOV              r7, r7, LSR #12 ;
   47 0000004C E79D1105        LDR              r1, [sp, r5, LSL #2] ;  grab sa
                                                            ved Rm off stack
   48 00000050 EB000001        BL               countLZ
   49 00000054 E78D0107        STR              r0, [sp, r7, LSL #2] ;  save re
                                                            sult over saved Rd 
                                                             
   50 00000058         endif1                               ; }
   51 00000058 E8FD9FFF        LDMFD            sp!, {r0-r12, PC}^ ; restore re
                                                            gister and CPSR
   52 0000005C         
   53 0000005C         
   54 0000005C         ; CLZ subroutine
   55 0000005C         ; returns amount of leading zeros
   56 0000005C         ; paramaters: r0: result (variable)
   57 0000005C         ;             r1: (value)
   58 0000005C         countLZ
   59 0000005C E92D4006        STMFD            sp!, {r1-r2,lr} 
                                                            ; save registers
   60 00000060 E3A00000        MOV              R0, #0      ; set R0 to zero
   61 00000064 E3510000        CMP              R1, #0      ; check if zero
   62 00000068 1A000001        BNE              notZero
   63 0000006C E3A00020        MOV              R0, #32     ; if(value = zero)
   64 00000070 EA000003        B                endSub      ;  set result = 32
   65 00000074         notZero
   66 00000074 E1B010A1        MOVS             R1, R1, LSR #1 ; LSL until carr
                                                            y flag is set
   67 00000078 2A000001        BCS              endSub      ;
   68 0000007C E2800001        ADD              R0, R0, #1  ; while(!carryFlag)
                                                            
   69 00000080 EAFFFFFB        B                notZero     ; result =+ 1;
   70 00000084         endSub                               ;
   71 00000084         
   72 00000084 E8BD8006        LDMFD            sp!, {r1-r2, pc} ; restore regi
                                                            sters and return
   73 00000088         
   74 00000088         
   75 00000088                 END
              00000000 
              00010020 
              F000F00F 
              016F0F10 
Command Line: --debug --xref --apcs=interwork --depend=.\clz.d -o.\clz.o -IC:\K
eil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Philips --predef
ine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --predefine="NO_CLOCK_SETUP
 SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --pr
edefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\clz.lst CLZ.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CLZ 00000000

Symbol: CLZ
   Definitions
      At line 1 in file CLZ.s
   Uses
      None
Comment: CLZ unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Undef 00000000

Symbol: Undef
   Definitions
      At line 5 in file CLZ.s
   Uses
      None
Comment: Undef unused
UndefHandler 00000024

Symbol: UndefHandler
   Definitions
      At line 35 in file CLZ.s
   Uses
      At line 11 in file CLZ.s
Comment: UndefHandler used once
countLZ 0000005C

Symbol: countLZ
   Definitions
      At line 58 in file CLZ.s
   Uses
      At line 48 in file CLZ.s
Comment: countLZ used once
endSub 00000084

Symbol: endSub
   Definitions
      At line 70 in file CLZ.s
   Uses
      At line 64 in file CLZ.s
      At line 67 in file CLZ.s

endif1 00000058

Symbol: endif1
   Definitions
      At line 50 in file CLZ.s
   Uses
      At line 43 in file CLZ.s
Comment: endif1 used once
notZero 00000074

Symbol: notZero
   Definitions
      At line 65 in file CLZ.s
   Uses
      At line 62 in file CLZ.s
      At line 69 in file CLZ.s

start 00000000

Symbol: start
   Definitions
      At line 9 in file CLZ.s
   Uses
      At line 3 in file CLZ.s
      At line 7 in file CLZ.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

stop 00000020

Symbol: stop
   Definitions
      At line 29 in file CLZ.s
   Uses
      At line 29 in file CLZ.s
Comment: stop used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file CLZ.s
      At line 6 in file CLZ.s
   Uses
      None
Warning: main multiply definedComment: main unused
1 symbol
349 symbols in table
